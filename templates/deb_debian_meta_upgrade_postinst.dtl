#!/bin/bash
set -e

case $1 in
    configure)

        cd "{{ install_prefix }}"

        if ! id -u "{{user}}" &> /dev/null; then
            echo "Creating '{{user}}' user"
            adduser --system "{{user}}"
        fi

        if [ ! -d "/var/log/{{app}}" ]; then
            echo "Creating log directory"
            mkdir "/var/log/{{app}}"
            chown -R "{{user}}" "/var/log/{{app}}"
        fi

        if [ ! -h "../log" ]; then
            echo "Linking log directory"
            ln -s "/var/log/{{app}}" "../log"
        fi

        if [ -f RELEASES ]; then
            PING=$({{ dep_version }}/{{ app }} ping || echo)
            if [ "$PING" == "pong" ]; then
                echo "Node running, performing runtime upgrade"
                read NODE_NAME NODE_COOKIE <<<$(./{{ dep_version }}/{{ app }} vm_info)

                erl -env ERL_MAX_PORTS 1024 -setcookie $NODE_COOKIE -name ctl-$$@127.0.0.1 -noshell -noinput -eval "
                Target = list_to_atom(\"$NODE_NAME\"),
                {ok, [{_,_,_,L}]} = file:consult(\"{{ dep_version }}/{{ app }}.rel\"),
                RelFile = filename:join(file:get_cwd(), \"{{ dep_version }}/{{ app }}.rel\"),
                LibDir = filename:join(file:get_cwd(), \"../lib\"),
                Libs = [ {M,V,LibDir} || {M,V} <- L],
                {ok, \"{{ dep_version }}\"} = rpc:call(Target, release_handler, set_unpacked, [RelFile, Libs], 300000),
                {ok, \"{{ parent_dep_version }}\", _} = rpc:call(Target, release_handler, check_install_release, [\"{{ dep_version }}\"], 300000),
                {ok, \"{{ parent_dep_version }}\", _} = rpc:call(Target, release_handler, install_release, [\"{{ dep_version }}\"], 300000),
                ok = rpc:call(Target, release_handler, make_permanent, [\"{{ dep_version }}\"], 300000),
                init:stop()."

            else
                echo "Node not running, rewriting RELEASES"

                erl -name ctl-$$@127.0.0.1 -noshell -noinput -eval '
                NewRelFile = "{{ dep_version }}/RELEASES",
                {ok, [NewRelease]} = file:consult(NewRelFile),
                RelFile = "/opt/{{ app }}/releases/RELEASES",
                {ok, [Releases]} = file:consult(RelFile),
                OldReleases = [ {release, N, V, E, D, old} || {release, N, V, E, D, S} <- Releases, V /= "{{dep_version}}"],
                ok = file:write_file(RelFile, io_lib:format("~p.~n", [NewRelease ++ OldReleases])),
                init:stop().'
            fi
        fi

        if [ ! -f "RELEASES" ]; then
            echo "RELEASES missing, copying from release"
            cp "{{ dep_version }}/RELEASES" "RELEASES"
            chmod 777 "RELEASES"
        fi

        if [ ! -f "start_erl.data" ]; then
            echo "start_erl.data missing, copying from release"
            cp "{{ dep_version }}/start_erl.data" "start_erl.data"
            chmod 777 "start_erl.data"
        fi
    ;;
esac

exit 0
